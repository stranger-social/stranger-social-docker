# PostgreSQL Database Configuration
DB_HOST=postgres
DB_PORT=5432
DB_NAME=mastodon_production
DB_USER=mastodon
DB_PASSWORD=CHANGE_ME_SECURE_PASSWORD
DATABASE_URL=postgresql://mastodon:CHANGE_ME_SECURE_PASSWORD@postgres:5432/mastodon_production?sslmode=disable

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=CHANGE_ME_REDIS_PASSWORD
REDIS_DB=0

# Mastodon Core Configuration
RAILS_ENV=production
NODE_ENV=production
PREPARED_STATEMENTS=true

# Rails Security Keys
# IMPORTANT: Generate these using: docker run --rm -it ghcr.io/mastodon/mastodon:v4.4.8 bundle exec rails secret
# You can also extract from existing Kubernetes secrets (mastodon-secrets)
SECRET_KEY_BASE=CHANGE_ME_GENERATE_WITH_RAILS_SECRET
OTP_SECRET=CHANGE_ME_GENERATE_WITH_RAILS_SECRET

# VAPID Keys for Web Push Notifications
# Generate using: docker run --rm -it ghcr.io/mastodon/mastodon:v4.4.8 bundle exec rails mastodon:webpush:generate_vapid_key
VAPID_PRIVATE_KEY=CHANGE_ME_GENERATE_VAPID_KEYS
VAPID_PUBLIC_KEY=CHANGE_ME_GENERATE_VAPID_KEYS

# Active Record Encryption Keys
# Generate random 32-byte base64 strings for PRIMARY_KEY and DETERMINISTIC_KEY
# Generate random 32-byte string for KEY_DERIVATION_SALT
ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY=CHANGE_ME_32_BYTE_BASE64_STRING
ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY=CHANGE_ME_32_BYTE_BASE64_STRING
ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT=CHANGE_ME_32_BYTE_STRING

# S3/Object Storage Configuration
# Use any S3-compatible provider (AWS S3, MinIO, Cloudflare R2, etc.)
S3_ENABLED=true
S3_BUCKET=your-bucket-name
# Example regions: us-east-1 (AWS), auto (R2), minio (self-hosted)
S3_REGION=your-region
# Provider endpoint/hostname (no provider-specific defaults here)
# For AWS: S3_HOSTNAME=s3.amazonaws.com, S3_ENDPOINT=https://s3.amazonaws.com
# For MinIO: S3_HOSTNAME=minio.yourdomain.com, S3_ENDPOINT=https://minio.yourdomain.com
S3_HOSTNAME=s3.your-provider.example
S3_ENDPOINT=https://s3.your-provider.example
# Optional: Public alias host if your provider uses virtual-hosted-style URLs
# Example: your-bucket-name.s3.amazonaws.com
S3_ALIAS_HOST=your-bucket-name.s3.your-provider.example
AWS_ACCESS_KEY_ID=YOUR_S3_ACCESS_KEY
AWS_SECRET_ACCESS_KEY=YOUR_S3_SECRET_KEY
S3_MULTIPART_THRESHOLD=16777216
# Set to true for path-style (http://endpoint/bucket/key). Some providers require this.
S3_OVERRIDE_PATH_STYLE=true

# SMTP Email Configuration
# Configure with your email provider (Gmail, SendGrid, Mailgun, etc.)
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_LOGIN=your-email@example.com
SMTP_PASSWORD=your-app-specific-password
SMTP_DOMAIN=yourdomain.com
SMTP_FROM_ADDRESS=notification@yourdomain.com
SMTP_REPLY_TO=notification@yourdomain.com
SMTP_AUTH_METHOD=plain
SMTP_DELIVERY_METHOD=smtp
SMTP_ENABLE_STARTTLS=auto
SMTP_TLS=false
SMTP_OPENSSL_VERIFY_MODE=peer
SMTP_CA_FILE=/etc/ssl/certs/ca-certificates.crt

# Mastodon Domain Configuration
# IMPORTANT: Set to your actual domain name
LOCAL_DOMAIN=yourdomain.com

# Federation and Security
AUTHORIZED_FETCH=true
LIMITED_FEDERATION_MODE=false
SINGLE_USER_MODE=false

# Streaming Configuration
STREAMING_CLUSTER_NUM=1
STREAMING_PORT=4000

# Web Server Configuration (Puma)
PUMA_WORKERS=2
PUMA_MIN_THREADS=5
PUMA_MAX_THREADS=5
PUMA_PERSISTENT_TIMEOUT=20

# Locale Configuration
DEFAULT_LOCALE=en
DEFAULT_TIMEZONE=UTC

# Media Retention (weekly cleanup)
MEDIA_REMOVAL_ENABLED=true

# Optional: Disable open registrations
REGISTRATIONS_MODE=none

# Logging
RAILS_LOG_LEVEL=info
LOG_LEVEL=info

# HTTP/HTTPS Configuration (for reverse proxy)
# Since nginx handles HTTPS, Mastodon sees HTTP from localhost
PROTOCOL=https
WEB_DOMAIN_IGNORE_PATH_WITH_SUBFOLDERS=true
TRUSTED_PROXIES=127.0.0.1,::1
