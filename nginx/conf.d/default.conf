# Redirect HTTP to HTTPS
server {
  listen 80;
  listen [::]:80;
  server_name stranger.social;
  
  # Allow ACME/certbot validation
  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  # Redirect all other traffic to HTTPS
  location / {
    return 301 https://$server_name$request_uri;
  }
}

# HTTPS Server Block
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name stranger.social;

  # SSL Certificate Configuration
  # These paths are mounted from ./certbot directory
  ssl_certificate /etc/letsencrypt/live/stranger.social/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/stranger.social/privkey.pem;
  
  # SSL Configuration (Mozilla recommendations)
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
  ssl_session_tickets off;
  
  # HSTS Header
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  # Security headers
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header Referrer-Policy "strict-origin-when-cross-origin" always;
  add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()" always;

  root /opt/mastodon/public;

  # Static files with long expiration
  location ~ ^/(packs|system/cache) {
    add_header Cache-Control "public, max-age=31536000, immutable" always;
    try_files $uri =404;
  }

  # Assets with long expiration
  location ~ ^/assets/ {
    add_header Cache-Control "public, max-age=31536000, immutable" always;
    try_files $uri =404;
  }

  # Well-known endpoints
  location ~ ^/.well-known {
    try_files $uri @proxy;
  }

  # WebFinger endpoint
  location ~ ^/users/ {
    try_files $uri @proxy;
  }

  # Streaming API
  location /api/v1/streaming {
    proxy_pass http://streaming:4000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-Forwarded-Port 443;
    
    proxy_buffering off;
    proxy_request_buffering off;
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
  }

  # Main application proxy
  location @proxy {
    proxy_pass http://web:3000;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-Forwarded-Port 443;
    
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Disable buffering for streaming/real-time responses
    proxy_buffering off;
    proxy_request_buffering off;
    
    # If web service is unavailable, serve Mastodon's themed error page
    error_page 502 503 /500.html;
  }

  # Default location - try static files, then proxy
  location / {
    try_files $uri @proxy;
  }

  # Health check endpoint
  location /health {
    access_log off;
    proxy_pass http://web:3000/health;
    proxy_http_version 1.1;
  }

  # Media/System files from S3 or local storage
  location /system/ {
    try_files $uri =404;
  }

  # Deny access to sensitive files
  location ~ /\.env {
    deny all;
  }
  
  location ~ /config/ {
    deny all;
  }
}
