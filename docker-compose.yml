services:
  redis:
    image: redis:7-alpine
    container_name: mastodon-redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "127.0.0.1:6379:6379"
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mastodon

  web:
    image: ghcr.io/mastodon/mastodon:v4.4.8
    container_name: mastodon-web
    restart: always
    env_file:
      - .env
    command: bundle exec puma -t ${PUMA_MIN_THREADS:-5}:${PUMA_MAX_THREADS:-5} -w ${PUMA_WORKERS:-2} --bind tcp://0.0.0.0:3000
    depends_on:
      - redis
      - postgres
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - mastodon-public:/opt/mastodon/public
    environment:
      # These override defaults from .env files if needed
      - RAILS_ENV=production
      - NODE_ENV=production
    networks:
      - mastodon
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  streaming:
    image: ghcr.io/mastodon/mastodon-streaming:v4.4.8
    container_name: mastodon-streaming
    restart: always
    env_file:
      - .env
    command: node ./streaming/index.js
    depends_on:
      - redis
      - postgres
    ports:
      - "127.0.0.1:4000:4000"
    environment:
      - RAILS_ENV=production
      - NODE_ENV=production
      - STREAMING_CLUSTER_NUM=${STREAMING_CLUSTER_NUM:-1}
    networks:
      - mastodon
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:4000/api/v1/streaming/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  sidekiq:
    image: ghcr.io/mastodon/mastodon:v4.4.8
    container_name: mastodon-sidekiq-default
    restart: always
    env_file:
      - .env
    command: bundle exec sidekiq -c 10 -q default -q mailers -q scheduler -q fasp
    depends_on:
      - redis
      - postgres
    environment:
      - RAILS_ENV=production
      - NODE_ENV=production
    networks:
      - mastodon
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'sidekiq' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  sidekiq-ingress:
    image: ghcr.io/mastodon/mastodon:v4.4.8
    container_name: mastodon-sidekiq-ingress
    restart: always
    env_file:
      - .env
    command: bundle exec sidekiq -c 25 -q ingress
    depends_on:
      - redis
      - postgres
    environment:
      - RAILS_ENV=production
      - NODE_ENV=production
    networks:
      - mastodon
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'sidekiq' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  sidekiq-push-pull-1:
    image: ghcr.io/mastodon/mastodon:v4.4.8
    container_name: mastodon-sidekiq-push-pull-1
    restart: always
    env_file:
      - .env
    command: bundle exec sidekiq -c 75 -q push,2 -q pull
    depends_on:
      - redis
      - postgres
    environment:
      - RAILS_ENV=production
      - NODE_ENV=production
    networks:
      - mastodon
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'sidekiq' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  sidekiq-push-pull-2:
    image: ghcr.io/mastodon/mastodon:v4.4.8
    container_name: mastodon-sidekiq-push-pull-2
    restart: always
    env_file:
      - .env
    command: bundle exec sidekiq -c 75 -q push -q pull,2
    depends_on:
      - redis
      - postgres
    environment:
      - RAILS_ENV=production
      - NODE_ENV=production
    networks:
      - mastodon
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'sidekiq' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: mastodon-postgres
    restart: always
    shm_size: 256mb
    env_file:
      - .env
    command: >
      postgres
      -c max_connections=300
      -c shared_buffers=256MB
      -c effective_cache_size=768MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=7864kB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=851kB
      -c huge_pages=off
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c pg_stat_statements.max=10000
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - /mnt/stranger_social_20251021_2300/data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - mastodon
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: mastodon-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - mastodon-public:/opt/mastodon/public:ro
    depends_on:
      - web
      - streaming
    networks:
      - mastodon
    healthcheck:
      test: ["CMD", "wget", "-q", "--header", "Host: ${LOCAL_DOMAIN}", "--no-check-certificate", "-O-", "https://localhost:443/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  mastodon:
    driver: bridge

volumes:
  redis-data:
  mastodon-public:
